<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/lang
       http://www.springframework.org/schema/lang/spring-lang-2.0.xsd
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="ru.neustupov.springidol">
        <context:include-filter type="assignable" expression="ru.neustupov.springidol.instruments.Instrument"/>
    </context:component-scan>

    <bean id="duke" class="ru.neustupov.springidol.performers.PoeticJuggler">
        <constructor-arg value="15"/>
        <constructor-arg>
            <bean class="ru.neustupov.springidol.Sonnet29"/>
        </constructor-arg>
    </bean>

    <bean id="sonnet29" class="ru.neustupov.springidol.Sonnet29"/>

    <bean id="theStage" class="ru.neustupov.springidol.Stage" factory-method="getInstance"/>

    <bean id="kenny" parent="baseSaxofonist"/>

    <bean id="saxophone" class="ru.neustupov.springidol.instruments.Saxophone"/>

    <bean id="piano" class="ru.neustupov.springidol.instruments.Piano"/>

    <!--
    <bean id="guitar" class="ru.neustupov.springidol.instruments.Guitar"/>
    -->

    <bean id="hank" class="ru.neustupov.springidol.performers.OneManBand">
        <property name="instruments">
            <map>
                <entry key="guitar" value-ref="guitar"/>
                <entry key="saxophone" value-ref="saxophone"/>
            </map>
        </property>
    </bean>

    <!--
    <bean id="karl" class="ru.neustupov.springidol.performers.Instrumentalist">
        <property name="song" value="#{kenny.song}"/>
    </bean>
    -->

    <bean id="baseSaxofonist" class="ru.neustupov.springidol.performers.Instrumentalist"
          abstract="true">
        <property name="instrument" ref="saxophone"/>
        <property name="song" value="Jingle Bells"/>
    </bean>

    <bean id="frank" parent="baseSaxofonist">
        <property name="song" value="Mary had a little lamb"/>
    </bean>

    <bean id="taylor" class="ru.neustupov.springidol.performers.Vocalist">
        <property name="song" value="Somewhere Over the Rainbow"/>
    </bean>

    <!--
    <bean id="steve" class="ru.neustupov.springidol.performers.Instrumentalist">
        <property name="instrument" ref="guitar"/>
        <property name="song" value="Somewhere Over the Rainbow"/>
    </bean>
    -->

    <bean id="harry" class="ru.neustupov.springidol.performers.Magician">
        <property name="magicBox" ref="magicBox"/>
        <property name="magicWords" value="Bippity boppity boo"/>
    </bean>

    <bean id="magicBox" class="ru.neustupov.springidol.instruments.MagicBoxImpl">
        <replaced-method name="getContents" replacer="tigerReplacer"/>
    </bean>

    <bean id="tigerReplacer" class="ru.neustupov.springidol.TigerReplacer"/>

    <!--
    <bean id="stevie" class="ru.neustupov.springidol.performers.Instrumentalist">
        <lookup-method name="getInstrument" bean="guitar"/>
        <property name="song" value="Greensleevers"/>
    </bean>
    -->

    <bean id="infoPhone" class="ru.neustupov.chapter03.PhoneNumber">
        <constructor-arg value="888"/>
        <constructor-arg value="555"/>
        <constructor-arg value="1212"/>
    </bean>

    <bean id="contact" class="ru.neustupov.chapter03.Contact">
        <property name="phoneNumber" value="888-555-1212"/>
    </bean>

    <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <map>
                <entry key="ru.neustupov.chapter03.PhoneNumber">
                    <bean id="phoneEditor" class="ru.neustupov.chapter03.PhoneEditor"/>
                </entry>
            </map>
        </property>
    </bean>

    <!--
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="${database.url}"/>
    </bean>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="jdbc.properties"/>
    </bean>
    -->

    <bean id="coconut" class="ru.neustupov.chapter03.scripting.Coconut">
        <property name="lime" ref="lime"/>
    </bean>

    <lang:jruby id="lime" script-source="classpath:ru/neustupov/chapter03/scripting/Lime.rb"
                script-interfaces="ru.neustupov.chapter03.scripting.Lime"
                refresh-check-delay="5000"/>

    <bean id="audience" class="ru.neustupov.springidol.Audience"/>

    <aop:config>
        <aop:aspect ref="audience">
            <aop:pointcut id="perfomance"
                          expression="execution(* ru.neustupov.springidol.performers.Performer.perform(..))"/>
            <aop:before pointcut-ref="perfomance" method="takeSeats"/>
            <aop:before pointcut-ref="perfomance" method="turnOffCellPhones"/>
            <aop:after-returning pointcut-ref="perfomance" method="applaud"/>
            <aop:after-throwing pointcut-ref="perfomance" method="demandRefund"/>
        </aop:aspect>
    </aop:config>

    <aop:config>
        <aop:aspect ref="audience">
            <aop:pointcut id="perfomance2"
                          expression="execution(* ru.neustupov.springidol.performers.Performer.perform(..))"/>
            <aop:around pointcut-ref="perfomance2" method="watchPerfomance"/>
        </aop:aspect>
    </aop:config>

    <bean id="magicianMindRader" class="ru.neustupov.springidol.performers.MagicianMindReader"/>

    <aop:config>
        <aop:aspect ref="magicianMindRader">
            <aop:pointcut id="thinking"
                          expression="execution(*
                          ru.neustupov.springidol.performers.Thinker.thinkOfSomething(String))
                          and args(thoughts)"/>
            <aop:before pointcut-ref="thinking" method="interceptThoughts" arg-names="thoughts"/>
        </aop:aspect>
    </aop:config>

    <bean id="contestantDelegate" class="ru.neustupov.springidol.performers.GraceousContestant"/>

    <aop:config>
        <aop:aspect>

     <aop:declare-parents types-matching="ru.neustupov.springidol.performers.Performer+"
                          implement-interface="ru.neustupov.springidol.performers.Contestant"
                          delegate-ref="contestantDelegate"/>
        </aop:aspect>
    </aop:config>

    <aop:aspectj-autoproxy/>

    <bean id="criticismEngine" class="ru.neustupov.springidol.CriticismEngineImpl">
        <property name="criticismPool">
            <list>
                <value>I`m not being rude, but that was appalling</value>
                <value>You may be the least talented person in this show</value>
                <value>Do everyone a favour and keep you day job</value>
            </list>
        </property>
    </bean>

    <!--
    <bean class="ru.neustupov.springidol.JudgeAspect"
          factory-method="aspectOf">
        <property name="criticismEngine" ref="criticismEngine"/>
    </bean>
    -->

    <!--             Chapter 6         -->

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/test"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>

    <bean id="sessioFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="ru.neustupov.spitter.domain"/>
        <property name="hibernateProperties">
            <props>
                <prop key="dialect">org.hibernate.dialect.MySQLDialect</prop>
            </props>
        </property>
    </bean>

    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
</beans>